#+title: Python
#+startup: show2levels
#+property: header-args :session :results output :exports both

* Table of Content :TOC_3:
- [[#vanilla-python][Vanilla Python]]
  - [[#python-basic][Python Basic]]
    - [[#list][List]]
    - [[#tuple][Tuple]]
    - [[#dictionary][Dictionary]]
    - [[#set][Set]]
  - [[#function][Function]]
    - [[#arguments-of-function][Arguments of Function]]
    - [[#iteration-in-python][Iteration in Python]]
    - [[#list-comprehensions][List Comprehensions]]
    - [[#generator][Generator]]
    - [[#iterator][Iterator]]
    - [[#map][Map]]
    - [[#reduce][Reduce]]
    - [[#filter][Filter]]
    - [[#sorted][Sorted]]
    - [[#decorator][Decorator]]
    - [[#partial-function][Partial Function]]
  - [[#object-oriented-programming][Object Oriented Programming]]
    - [[#get-information-of-instances][Get Information of Instances]]
    - [[#attributes-of-instances-and-classes][Attributes of Instances and Classes]]
    - [[#property][Property]]
    - [[#customization][Customization]]
    - [[#enumerations][Enumerations]]
    - [[#metaclass][Metaclass]]
  - [[#error-debug-and-test][Error, Debug and Test]]
    - [[#error][Error]]
    - [[#debug][Debug]]
    - [[#unit-test][Unit Test]]
- [[#numpy][NumPy]]
  - [[#create-numpy-arrays][Create NumPy Arrays]]
  - [[#dimensions-in-numpy-arrays][Dimensions in NumPy Arrays]]
  - [[#numpy-indexing][NumPy Indexing]]
  - [[#numpy-slicing][NumPy Slicing]]
  - [[#numpy-data-types][NumPy Data Types]]
    - [[#check-the-data-type-of-an-array][Check the Data Type of an Array]]
    - [[#create-arrays-with-a-defined-data-type][Create Arrays with a Defined Data Type]]
    - [[#convert-data-type-on-existing-arrays][Convert Data Type on Existing Arrays]]
  - [[#numpy-array-copy-and-view][NumPy Array Copy and View]]
    - [[#numpy-array-copy][NumPy Array Copy]]
    - [[#numpy-array-view][NumPy Array View]]
    - [[#check-if-array-owns-its-data][Check if Array Owns its Data]]
  - [[#numpy-array-shape-and-reshape][NumPy Array Shape and Reshape]]
  - [[#iterate-arrays][Iterate Arrays]]
    - [[#iterate-on-each-scalar-element][Iterate on Each Scalar Element:]]
    - [[#iterate-array-with-different-data-types][Iterate array with different data types]]
    - [[#iterate-with-different-step-sizes][Iterate with Different Step Sizes]]
    - [[#enumerate-iteration][Enumerate Iteration]]
  - [[#join-numpy-arrays][Join NumPy Arrays]]
    - [[#concatenate][Concatenate]]
    - [[#stack][Stack]]
    - [[#split-numpy-arrays][Split NumPy Arrays]]
  - [[#search-arrays][Search Arrays]]
  - [[#sort-arrays][Sort Arrays]]
  - [[#filter-arrays][Filter Arrays]]
- [[#pandas][Pandas]]
  - [[#data-types-and-import-in-pandas][Data Types and Import in Pandas]]
    - [[#pandas-series][Pandas Series]]
    - [[#pandas-dataframe][Pandas DataFrame]]
    - [[#pandas-read-files][Pandas Read Files]]
    - [[#pandas-write-files][Pandas Write Files]]
    - [[#pandas-data-analysis][Pandas Data Analysis]]
- [[#machine-learning][Machine Learning]]

* Vanilla Python
** Python Basic
*** List
**** Insert Elements in Lists
To insert an element in a list, use the function ~insert()~:

#+begin_src python
ls = [1, 2, 3, 'A']
print(ls)
ls.insert(1, 'Str')
print(ls)
#+end_src

#+RESULTS:
: [1, 2, 3, 'A']
: [1, 'Str', 2, 3, 'A']

Or append an element:

#+begin_src python
ls.append('B')
print(ls)
#+end_src

#+RESULTS:
: [1, 'Str', 2, 3, 'A', 'B']

**** Remove Elements in Lists
To delete the last element in a list, use
#+begin_src python
print(ls.pop())
print(ls)
#+end_src

#+RESULTS:
: B
: [1, 'Str', 2, 3, 'A']

If pass an argument to ~pop()~, it will remove and return the element of
the given index:

#+begin_src python
ls.pop(0)
print(ls)
#+end_src

#+RESULTS:
: ['Str', 2, 3, 'A']

**** Enumerate Elements in Lists
Use the following function to get a C-like index-based iteration:

#+begin_src python
ls = ['A', 'B', 'C', 'D', 'E']
ls_enum = enumerate(ls)
for i, value in ls_enum:
    print(i, value)
#+end_src

#+RESULTS:
: 0 A
: 1 B
: 2 C
: 3 D
: 4 E

*** Tuple
A tuple is an invariable list.

*** Dictionary
To define a dictionary:
#+begin_src python
d = {'A': 1, 'B': 2, 'C': 3, 'D': 4}
print(d['A'])
#+end_src

#+RESULTS:
: 1

It's better to use ~get()~ to get a value in the dictionary to avoid error

#+begin_src python
print('D' in d)
print(d.get('D'))
print('E' in d)
print(d.get('E'))
print(d.get('E', -1))
#+end_src

#+RESULTS:
: True
: 4
: False
: None
: -1

**** Remove Elements in Dictionaries
use function ~pop(key)~ To remove an element in a dictionary:

#+begin_src python
print(d)
print(d.pop('A'))
print(d)
#+end_src

#+RESULTS:
: {'A': 1, 'B': 2, 'C': 3, 'D': 4}
: 1
: {'B': 2, 'C': 3, 'D': 4}

**** Get Keys and Values in Dictionaries

#+begin_src python
print(d)
print(d.keys())
print(d.values())
print(d.items())
#+end_src

#+RESULTS:
: {'B': 2, 'C': 3, 'D': 4}
: dict_keys(['B', 'C', 'D'])
: dict_values([2, 3, 4])
: dict_items([('B', 2), ('C', 3), ('D', 4)])

*** Set
A set is a list-like object whose elements cannot be repeated

#+begin_src python
s = {1, 2, 3, 4, 5, 5, 4, 3, 2, 1}
print(s)
#+end_src

#+RESULTS:
: {1, 2, 3, 4, 5}

**** Add Elements into Sets
Use the function ~add()~ to add an element into a set:

#+begin_src python
s.add(4)
print(s)
s.add(6)
print(s)
s.add('A')
print(s)
#+end_src

#+RESULTS:
: {1, 2, 3, 4, 5}
: {1, 2, 3, 4, 5, 6}
: {1, 2, 3, 4, 5, 6, 'A'}

**** Remove Elements from Sets

#+begin_src python
s.remove(1)
print(s)
#+end_src

#+RESULTS:
: {2, 3, 4, 5, 6, 'A'}

**** Sets Operations
Sets in Python also have the operation in math, such as union and
intersection:

#+begin_src python
s1 = {1, 2, 3}
s2 = {2, 3, 4}
print(s1 & s2)
print(s1 | s2)
#+end_src

#+RESULTS:
: {2, 3}
: {1, 2, 3, 4}

** Function
*** Arguments of Function
The arguments of Python's Functions have 5 different types:
**** Positional Arguments
Positional arguments are the most common arguments in Python:

#+begin_src python
def my_minus(a, b):
    return a - b


print(my_minus(10, 2))
#+end_src

#+RESULTS:
: 8

**** Default Arguments
In the following example, the argument ~times~ is a default argument
#+begin_src python
def my_power(num, times=2):
    return num ** times


print(my_power(3))
print(my_power(3, 3))
#+end_src

#+RESULTS:
: 9
: 27

**** Arbitrary Positional Arguments
Arbitrary positional arguments allow us to pass variable-length arguments
to a function, like:

#+begin_src python
def my_sum(*num):
    num_sum = 0
    for item in num:
        num_sum += item
    return num_sum


print(my_sum(1, 2))
print(my_sum(1, 2, 3))
#+end_src

#+RESULTS:
: 3
: 6

Use ~*ls~ instead ~ls~ to pass a list to the function:

#+begin_src python
ls = [1, 2, 3]
print(my_sum(*ls))
#+end_src

#+RESULTS:
: 6

**** Arbitrary Keyword Arguments
For arbitrary positional argument, a *double asterisk* is placed before
a argument in a function which can hold keyword variable-length arguments.

#+begin_src python
def print_arguments(**args):
    for item in args.items():
        print(item)


print_arguments(number=1, string='a', boolean=False)
#+end_src

#+RESULTS:
: ('number', 1)
: ('string', 'a')
: ('boolean', False)

**** Keyword Arguments
Different from arbitrary keyword arguments, keyword arguments must be
passed in the keyword form to the function:

#+begin_src python
def person(name, age, *, city, job):
    print(name, age, city, job, sep=", ")


person("Jack", 30, city="New York", job="Student")
#+end_src

#+RESULTS:
: Jack, 30, New York, Student

**** The Order of Arguments
The order of arguments of functions in Python is as the following:

1. Positional arguments
2. Default arguments
3. Arbitrary positional arguments (~*args~)
4. Keyword arguments
5. Arbitrary keyword arguments (~**kwargs~)

Here are some examples:

#+begin_src python
def f1(a, b, c=1, *args, d, e, **kwargs):
    pass
#+end_src

#+RESULTS:

If there is no arbitrary positional arguments:

#+begin_src python
def f2(a, b, c=1, *, d, e, **kwargs):
    pass
#+end_src

#+RESULTS:

*** Iteration in Python
Objects like /lists/, /tuples/ and /dictionaries/ are all iterable. Use
the function ~isinstance()~ and class ~collections.abc.Iterable~ to judge
if a item is iterable.

#+begin_src python
from collections.abc import Iterable


print(isinstance("abc", Iterable))
print(isinstance([1, 2, 3], Iterable))
print(isinstance({1: "A", 2: "B", 3: "C"}, Iterable))
#+end_src

#+RESULTS:
: True
: True
: True

*** List Comprehensions
To generate a list like ~[1*1, 2*2, 3*3, \cdots, 10*10]~, use the following
*list comprehension*:

#+begin_src python
print([x * x for x in range(1, 11)])

print([x for x in range(11) if x % 2 == 0])

print([x if x % 2 == 0  else -x for x in range(11)])
#+end_src

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
: [0, 2, 4, 6, 8, 10]
: [0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]

We can observe that:

1. ~if~ is after ~for~: filter, should not add ~else~;
2. ~if~ is before ~for~: condition, must add ~else~.

*** Generator
**** List-comprehension-like Generator
A generator return only one value after called, the following is an
example

#+begin_src python
g = (x ** 3 for x in range(11))
print(g)
#+end_src

#+RESULTS:
: <generator object <genexpr> at 0x7fc0000a6cf0>

To get the elements in a generator, use the function ~next()~ (not recommend):

#+begin_src python
print(next(g))
print(next(g))
#+end_src

#+RESULTS:
: 0
: 1

The /true/ usage of generator is combining it with ~for~ structure:

#+begin_src python
for item in g:
    print(item)
#+end_src

#+RESULTS:
: 8
: 27
: 64
: 125
: 216
: 343
: 512
: 729
: 1000

**** Function-based Generator
Sometimes, the list-comprehension-like generator cannot satisfy us, in
this situation, use a function-base generator to get a more complex one

#+begin_src python
def fib(max_num=-1):
    n, a, b = 0, 0, 1
    while n < max_num or n == -1:
        yield(b)
        a, b = b, a + b
        n += 1
    return 'Done'

gen_fib = fib(5)

for item in gen_fib:
    print(item)
#+end_src

#+RESULTS:
: 1
: 1
: 2
: 3
: 5

*** Iterator
Every objects can be called by function ~next()~ are called *iterators*.
Note that although /lists/, /tuple/ and /dictionaries/ are all *iterable*,
they are not *iterators*. To get if an object is an iterator, use

#+begin_src python
from collections.abc import Iterator
print(isinstance((x for x in range(10)), Iterator))
print(isinstance([], Iterator))
print(isinstance({}, Iterator))
print(isinstance('abc', Iterator))
#+end_src

#+RESULTS:
: True
: False
: False
: False

However, all /iterable/ objects can be turned into /iterators/ by function
~iter()~

#+begin_src python
print(isinstance(iter([]), Iterator))
print(isinstance(iter({}), Iterator))
print(isinstance(iter('abc'), Iterator))
#+end_src

#+RESULTS:
: True
: True
: True

*** Map
To apply a function to all elements in an iterable object, we can use the
function ~map()~:

#+begin_src python
def f(x):
    return x ** 3

ls = [x for x in range(10)]
map_f2ls = map(f, ls)
print(map_f2ls)
print(list(map_f2ls))
#+end_src

#+RESULTS:
: <map object at 0x7fc000084310>
: [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]

From the above results, we can be informed that the return value of ~map()~
is an /iterator/.

*** Reduce
The function ~reduce()~ accumulate the results of a function and elements
in an iterable object, the function must receive *two* arguments:

~reduce(f, [x1, x2, x3, x4]) == f(f(f(x1, x2), x3), x4)~

For an example:

#+begin_src python
from functools import reduce


def add(a, b):
    return a + b


print(reduce(add, [x for x in range(10)]))
#+end_src

#+RESULTS:
: 45

Another example: turn a ~str~ to ~int~:

#+begin_src python
DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4,
          '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}


def str2int(s):
    return reduce(lambda x, y: x * 10 + y, map(lambda c: DIGITS[c], s))


print(str2int("123456"))
#+end_src

#+RESULTS:
: 123456

*** Filter
Function ~filter()~ apply the first argument (a function returning boolean)
to all of the elements in the second argument (an iterable object). It returns
an iterator in which every elements return ~True~ after applied the first argument.

#+begin_src python
print(ls)
print(list(filter(lambda x: x % 2 == 1, ls)))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
: [1, 3, 5, 7, 9]

Here is an example to get all primes:

#+begin_src python
def _odd_iter():
    n = 1
    while True:
        n += 2
        yield n


def primes():
    yield 2
    it = _odd_iter()
    while True:
        n = next(it)
        yield n
        it = filter(lambda x: x % n != 0, it)


for n in primes():
    if n < 20:
        print(n)
        continue
    break
#+end_src

#+RESULTS:
#+begin_example
2
3
5
7
9
11
13
15
17
19
#+end_example
*** Sorted :TODO:
*** Decorator :TODO:
*** Partial Function :TODO:
** Object Oriented Programming
*** Get Information of Instances
#+begin_src python
class Animal:
    def __init__(self, name: str, age: int=0):
        self.name = name
        self.age = age


    def __str__(self) -> str:
        return self.name
    __repr__ = __str__


    def run(self) -> None:
        print(self.name + "run.")


dog = Animal("Doge", 12)
print(dog)
#+end_src

#+RESULTS:
: Doge

**** Type of Instances
#+begin_src python
print(type(dog))
print(isinstance(dog, object))
print(isinstance(dog, Animal))
print(isinstance(dog, str))
#+end_src

#+RESULTS:
: <class '__main__.Animal'>
: True
: True
: False

**** Get Attributes and Methods of Instances
#+begin_src python
print(dir(dog))
print(hasattr(dog, "name"))
print(hasattr(dog, "gender"))
print(hasattr(dog, "run"))
print(getattr(dog, "name", "Not Found"))
print(getattr(dog, "gender", "Not Found"))
print(getattr(dog, "run", "Not Found"))
#+end_src

#+RESULTS:
: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'name', 'run']
: True
: False
: True
: Doge
: Not Found
: <bound method Animal.run of Doge>
*** Attributes of Instances and Classes
To define an attribute of instances, use the variable ~self~. If an attribute
defined without ~self~, it's a class-wise attribute.

#+begin_src python
class Dog(Animal):
    class_name = "dog"
    def __init__(self, name : str, age: int=0):
        super().__init__(name, age)


dog = Dog("Doge", 12)
print(dog.class_name)
#+end_src

#+RESULTS:
: dog

*** Property
To set limit to an attribute, use /decorator/ ~@property~ as following

#+begin_src python
class Student(object):

    @property
    def score(self):
        return self._score


    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError("Score must be an integer")
        if not 0 <= value <= 100:
            raise ValueError("Score must be between 0 and 100")
        self._score = value


    """
    If an attribute is read-only, use `@property` only to prevent the value
    be set.
    """

    @property
    def birthday(self):
        return self._birthday
#+end_src

#+RESULTS:
*** Customization
There are lots of different customizable built-in methods, such as

- ~__str__(self)~
- ~__repr__(self)~
- ~__iter__(self)~
- ~__getitem__(self)~
- ~__call__(self)~

More information: [[http://docs.python.org/3/reference/datamodel.html#special-method-names][Python Documentation]]

*** Enumerations
#+begin_src python
from enum import Enum


Month = Enum("Month",
             ("Jan", "Feb", "Mar", "Apr",
              "May", "Jun", "Jul", "Aug",
              "Sep", "Oct", "Nov", "Dec"))
#+end_src

#+RESULTS:

If the elements are unique:

#+begin_src python
from enum import unique


@unique
class Weekday(Enum):
    Sun = 0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6


print(Weekday.Mon)
print(Weekday['Wed'])
print(Weekday(6))
print(Weekday.Fri.value)
#+end_src

#+RESULTS:
: Weekday.Mon
: Weekday.Wed
: Weekday.Sat
: 5

*** Metaclass :TODO:

** Error, Debug and Test
*** Error
#+begin_src python
def divide(a, b):
    try: print(a / b)
    except ZeroDivisionError as e: print("Error:", e)
    finally: print("Finished")


divide(1, 2)
divide(1, 0)
#+end_src

#+RESULTS:
: 0.5
: Finished
: Error: division by zero
: Finished

**** Throw an Error
To throw an error:

#+begin_src python
def func(s):
    n = int(s)
    if n == 0:
        raise ValueError("Invalid value: %s" % s)
    return 10 / n


func("0")
#+end_src

#+RESULTS:

This will throw an error:
~ValueError: Invalid value: 0~

There is another method to handle with errors:

#+begin_src python
def bar():
    try:
        foo('0')
    except ValueError as e:
        print('ValueError!')
        raise
#+end_src

#+RESULTS:

If ~raise~ is followed by nothing, it will raise the current error.

**** Define a Error Type
Not necessary.

#+begin_src python
class MyError(ValueError):
    pass
#+end_src

#+RESULTS:

*** Debug
**** Assert
#+begin_src python
def foo(s):
    n = int(s)
    assert n != 0, 'n is zero!'
    return 10 / n


foo("0")
#+end_src

#+RESULTS:

It will raise error:

~AssertionError: n is zero!~

**** Logging
#+begin_src python
import logging


logging.basicConfig(level=logging.INFO)


def foo(s):
    n = int(s)
    logging.info('n = %d' % n)
    return(10 / n)


foo("0")
#+end_src

#+RESULTS:
: INFO:root:n = 0

~logging~ has different levels of information:

- ~logging.DEBUG~
- ~logging.INFO~
- ~logging.WARNING~
- ~logging.ERROR~

*** Unit Test :TODO:

* NumPy
First, install and import NumPy in python

#+begin_src python
import numpy as np  # Import NumPy and set it's alias


print(np.__version__)  # Get NumPy's version
#+end_src

#+RESULTS:
: 1.25.2

** Create NumPy Arrays
umPy works with *arrays*. The object in NumPy is called ~ndarray~

+begin_src python
rr = np.array([x for x in range(5)])  # This create a new ndarry by function `np.array`
rint(arr)
+end_src

+RESULTS:
 [0 1 2 3 4]

he argument in ~np.array()~ can be any *array-like object*, such as list and
uple.

** Dimensions in NumPy Arrays
o get the dimension of an array, check the ~ndim~ attribute of the array

+begin_src python
rr_0D = np.array(1)
rr_1D = np.array([x for x in range(5)])
rr_2D = np.array([[x for x in range(5)], [x for x in range(5, 10)]])
rint(arr_0D, arr_1D, arr_2D, sep="\n")
rint("------------------")
rint(arr_0D.ndim, arr_1D.ndim, arr_2D.ndim, sep="\n")
+end_src

+RESULTS:
 1
 [0 1 2 3 4]
 [[0 1 2 3 4]
  [5 6 7 8 9]]
 ------------------
 0
 1
 2

n array can have any number of dimensions. Define the number of dimensions
f an array by using the ~ndmin~ argument

+begin_src python
rr_5D = np.array([1, 2, 3 ,4], ndmin=5)
rint(arr_5D)
+end_src

+RESULTS:
 [[[[[1 2 3 4]]]]]

** NumPy Indexing
he indexing of NumPy arrays is the same as the one of lists in Python: It
tarts with ~0~, and ends with ~-1~

+begin_src python
rint(arr[0], arr[1])
+end_src

+RESULTS:
 0 1

** NumPy Slicing
he slicing is like

+begin_src python
rint(arr)
rint(arr[0: 2])
rint(arr[: 2])
rint(arr[2:])
rint(arr[2: -1])
rint(arr[::2])
+end_src

+RESULTS:
 [0 1 2 3 4]
 [0 1]
 [0 1]
 [2 3 4]
 [2 3]
 [0 2 4]

he default of ~(start, end, step)~ is ~(0, -1, 1)~. The result /includes/
he start index, but /excludes/ the end index.

** NumPy Data Types
Python* has these data types by default

 ~string~
 ~integer~
 ~float~
 ~boolean~
 ~complex~

NumPy* has some extra data types, and refer to data types with one character

 ~i~ :: interger
 ~b~ :: boolean
 ~u~ :: unsigned integer
 ~f~ :: float
 ~c~ :: complex float
 ~m~ :: timedelta
 ~M~ :: datetime
 ~O~ :: object
 ~S~ :: string
 ~U~ :: unicode string
 ~V~ :: fixed chunk of memory for other type (void)

*** Check the Data Type of an Array
he NumPy array object has a property called ~dtype~ that returns the data
ype of the array:

+begin_src python
rint(arr.dtype)
+end_src

+RESULTS:
 int64

*** Create Arrays with a Defined Data Type
e can use ~np.array()~ function to create arrays, this function can take
n optional argument: ~dtype~ that allows us to define the expected data
ype of the array elements:

+begin_src python
rr_str = np.array([1, 2, 3, 4], dtype="S")
+end_src

+RESULTS:

NOTE*: If a type is given in which elements can't be casted then NumPy will
aise a ~ValueError~, such as try to convert a ~string~ to an ~integer~.

*** Convert Data Type on Existing Arrays
he function ~astype()~ creates a copy of the array and allow we to specify
he data type as an argument:

+begin_src python
rr_str = np.array([str(x) for x in range(5)])
rint(arr_str)
rr_int = arr_str.astype("i")
rint(arr_int)
+end_src

+RESULTS:
 ['0' '1' '2' '3' '4']
 [0 1 2 3 4]

** NumPy Array Copy and View
*** NumPy Array Copy
he copy *should not be affected* by the changes mede to the original array,
ice versa.

+begin_src python
rr = np.arange(5)
rint(arr)
rr_copy = arr.copy()
 Or use `arr_copy = np.array(arr, copy=True)`
rr[0] = -1
rint(arr)
rint(arr_copy)
rr_copy[0] = -2
rint(arr)
rint(arr_copy)
+end_src

+RESULTS:
 [0 1 2 3 4]
 [-1  1  2  3  4]
 [0 1 2 3 4]
 [-1  1  2  3  4]
 [-2  1  2  3  4]

*** NumPy Array View
n the contrary of /copy/, any change on the original array will reflect
n the view.

+begin_src python
rr = np.arange(5)
rint(arr)
rr_view = arr.view()
rr[0] = -1
rint(arr)
rint(arr_view)
rr_view[0] = -2
rint(arr)
rint(arr_view)
+end_src

+RESULTS:
 [0 1 2 3 4]
 [-1  1  2  3  4]
 [-1  1  2  3  4]
 [-2  1  2  3  4]
 [-2  1  2  3  4]

*** Check if Array Owns its Data
rint the value of the base attribute to check if an array owns its data
r not.

+begin_src python
rint(arr.base)
rint(arr_copy.base)
rint(arr_view.base)
+end_src

+RESULTS:
 None
 None
 [-2  1  2  3  4]
** NumPy Array Shape and Reshape
et the shape of one array:

+begin_src python
rint(arr)
rint(arr.shape)
rint(arr_2D)
rint(arr_2D.shape)
+end_src

+RESULTS:
 [-2  1  2  3  4]
 (5,)
 [[0 1 2 3 4]
  [5 6 7 8 9]]
 (2, 5)

he shape of an array is the number of elements in each dimension. By
eshaping we can add or remove dimensions or change number of elements in
ach dimension.

+begin_src python
rr = np.arange(12)
rint(arr)
ew_arr = arr.reshape(3, 4)
rint("-" * 20)
rint(new_arr)
+end_src

+RESULTS:
 [ 0  1  2  3  4  5  6  7  8  9 10 11]
 --------------------
 [[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

r simpler:

+begin_src python
rint(arr.reshape(3, -1))
rint("-" * 20)
rint(arr.reshape(-1, 4))
+end_src

+RESULTS:
 [[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]
 --------------------
 [[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

o transpose an array, use:

+begin_src python
rint(new_arr)
rint("-" * 20)
rint(new_arr.T)
+end_src

+RESULTS:
 [[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]
 --------------------
 [[ 0  4  8]
  [ 1  5  9]
  [ 2  6 10]
  [ 3  7 11]]

or 3-D or higher array:

+begin_src python
rr_3D = np.arange(24).reshape(2, 3 ,4)
rint(arr_3D)
rint("-" * 20)
rint(arr_3D.T)
+end_src

+RESULTS:
+begin_example
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

[[12 13 14 15]
 [16 17 18 19]
 [20 21 22 23]]]
-------------------
[[ 0 12]
 [ 4 16]
 [ 8 20]]

[[ 1 13]
 [ 5 17]
 [ 9 21]]

[[ 2 14]
 [ 6 18]
 [10 22]]

[[ 3 15]
 [ 7 19]
 [11 23]]]
+end_example

urn a row into a column:

+begin_src python
rint(arr)
rint(arr.T)
rint(arr.reshape(-1, 1))
+end_src

+RESULTS:
+begin_example
 0  1  2  3  4  5  6  7  8  9 10 11]
 0  1  2  3  4  5  6  7  8  9 10 11]
[ 0]
[ 1]
[ 2]
[ 3]
[ 4]
[ 5]
[ 6]
[ 7]
[ 8]
[ 9]
[10]
[11]]
+end_example

** Iterate Arrays
*** Iterate on Each Scalar Element:
+begin_src python
rr = np.arange(8).reshape(2, 2, 2)
rint(arr)

or i in np.nditer(arr):
   print(i, end=", ")
+end_src

+RESULTS:
 [[[0 1]
   [2 3]]

  [[4 5]
   [6 7]]]
 0, 1, 2, 3, 4, 5, 6, 7,

*** Iterate array with different data types
se ~op_dtypes~ argument and pass it the expected datatype to change
he datatype of elements while iterating.

umPy does not change the data type of the element in-place (where
he element is in array) so it needs some other space to perform this
ction, that extra space is called buffer, and in order to enable it
n ~nditer()~ we pass ~flags=['buffered']~.

+begin_src python
or i in np.nditer(arr, flags=['buffered'], op_dtypes=['S']):
   print(i, end=", ")
+end_src

+RESULTS:
 b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',

*** Iterate with Different Step Sizes
+begin_src python
rr = np.arange(24).reshape(4, 6)
rint(arr)
or i in np.nditer(arr[::2, ::3]):
   print(i)
+end_src

+RESULTS:
 [[ 0  1  2  3  4  5]
  [ 6  7  8  9 10 11]
  [12 13 14 15 16 17]
  [18 19 20 21 22 23]]
 0
 3
 12
 15

*** Enumerate Iteration
+begin_src python
rr = np.array(["A", "B", "C"])
rint(arr)
or idx, item in np.ndenumerate(arr):
   print(idx, ': ', item)
+end_src

+RESULTS:
 ['A' 'B' 'C']
 (0,) :  A
 (1,) :  B
 (2,) :  C
** Join NumPy Arrays
*** Concatenate
n NumPy we join arrays by axes. Function ~concatenate()~ require an
rgument ~axis~ to specify the way to join.

 ~axis=0~ :: join along columns
 ~axis=1~ :: join along rows

+begin_src python
rr1 = np.arange(6).reshape(2, 3)
rint(arr1)
rr2 = np.arange(6, 12).reshape(2, 3)
rint(arr2)
+end_src

+RESULTS:
 [[0 1 2]
  [3 4 5]]
 [[ 6  7  8]
  [ 9 10 11]]

+begin_src python
rr_col = np.concatenate([arr1, arr2])
rint(arr_col)
rint("-" * 20)
rr_row = np.concatenate([arr1, arr2], axis = 1)
rint(arr_row)
+end_src

+RESULTS:
 [[ 0  1  2]
  [ 3  4  5]
  [ 6  7  8]
  [ 9 10 11]]
 --------------------
 [[ 0  1  2  6  7  8]
  [ 3  4  5  9 10 11]]

*** Stack
tacking is same as concatenation, the only difference is that stacking is done along a new axis.

+begin_src python
rr_1 = np.arange(6)
rr_2 = np.arange(6, 12)
rint(np.stack([arr_1, arr_2], axis=0))
rint(np.stack([arr_1, arr_2], axis=1))
+end_src

+RESULTS:
 [[ 0  1  2  3  4  5]
  [ 6  7  8  9 10 11]]
 [[ 0  6]
  [ 1  7]
  [ 2  8]
  [ 3  9]
  [ 4 10]
  [ 5 11]]

*** Split NumPy Arrays
plitting is reverse operation of Joining.

+begin_src python
rr = np.arange(12)
rint(np.array_split(arr, 2))
rint(np.array_split(arr, 3))
rint(np.array_split(arr, 5))
+end_src

+RESULTS:
 [array([0, 1, 2, 3, 4, 5]), array([ 6,  7,  8,  9, 10, 11])]
 [array([0, 1, 2, 3]), array([4, 5, 6, 7]), array([ 8,  9, 10, 11])]
 [array([0, 1, 2]), array([3, 4, 5]), array([6, 7]), array([8, 9]), array([10, 11])]

or 2-D array:

+begin_src python
rr = np.arange(24).reshape(4, -1)
rint(arr)
rint(np.array_split(arr, 2))
rint(np.array_split(arr, 3, axis=1))
+end_src

+RESULTS:
+begin_example
[ 0  1  2  3  4  5]
[ 6  7  8  9 10 11]
[12 13 14 15 16 17]
[18 19 20 21 22 23]]
array([[ 0,  1,  2,  3,  4,  5],
      [ 6,  7,  8,  9, 10, 11]]), array([[12, 13, 14, 15, 16, 17],
      [18, 19, 20, 21, 22, 23]])]
array([[ 0,  1],
      [ 6,  7],
      [12, 13],
      [18, 19]]), array([[ 2,  3],
      [ 8,  9],
      [14, 15],
      [20, 21]]), array([[ 4,  5],
      [10, 11],
      [16, 17],
      [22, 23]])]
+end_example

** Search Arrays
ou can search an array for a certain value, and return the indexes that
et a match.

o search an array, use the ~where~() method.

+begin_src python
rr = np.array([1, 2, 3, 4, 5, 6, 4, 4])
rint(np.where(arr == 4))
rint(np.where(arr % 2))
+end_src

+RESULTS:
 (array([3, 6, 7]),)
 (array([0, 2, 4]),)

** Sort Arrays
+begin_src python
rr_int = np.array([1, 3, 5, 2, 4])
rint(np.sort(arr_int))
rr_str = np.array(["apple", "cherry", "banana"])
rint(np.sort(arr_str))

rr_2D = np.array([[6, 2, 4, 1, 6], [4, 2, 5, 1, 5]])
rint(np.sort(arr_2D))
+end_src

+RESULTS:
 [1 2 3 4 5]
 ['apple' 'banana' 'cherry']
 [[1 2 4 6 6]
  [1 2 4 5 5]]

** Filter Arrays
#+begin_src python
arr = np.arange(6)
cond = [True, True, False, True, False, False]
print(arr[cond])
#+end_src

#+RESULTS:
: [0 1 3]

Create a filter for array:

#+begin_src python
arr = np.arange(10)
filter = arr % 2 == 0
print(arr[filter])
# Or
print(arr[arr % 2 == 0])
#+end_src

#+RESULTS:
: [0 2 4 6 8]
: [0 2 4 6 8]

* Pandas
Install ~Pandas~ and import it:

#+begin_src python
import pandas as pd


print(pd.__version__)
#+end_src

#+RESULTS:
: 2.0.3

** Data Types and Import in Pandas
*** Pandas Series

#+begin_src python
ls = [x ** 2 for x in range(5)]
srs = pd.Series(ls)
print(srs)
print(srs[0])
print(srs[4])
#+end_src

#+RESULTS:
: 0     0
: 1     1
: 2     4
: 3     9
: 4    16
: dtype: int64
: 0
: 16

Create *labels* for Pandas Series:

#+begin_src python
ls = [1, 2, 3]
ind = ["One", "Two", "Three"]
srs = pd.Series(ls, ind)
print(srs)
#Or
srs = pd.Series(ls, index=ind)
print("-" * 30)
print(srs)
print(srs["One"])
#+end_src

#+RESULTS:
#+begin_example
One      1
Two      2
Three    3
dtype: int64
------------------------------
One      1
Two      2
Three    3
dtype: int64
1
#+end_example

*** Pandas DataFrame
A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional
array, or a table with rows and columns.

#+begin_src python
data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}

df = pd.DataFrame(data)
print(df)
#+end_src

#+RESULTS:
:    calories  duration
: 0       420        50
: 1       380        40
: 2       390        45

**** Pandas DataFrame Locate

Pandas use the ~loc~ attribute to return one or more specified row(s), and
it returns a Pandas Series

#+begin_src python
print(df.loc[0])
#+end_src

#+RESULTS:
: calories    420
: duration     50
: Name: 0, dtype: int64

When using ~[]~ instead of a number, it returns a DataFrame

#+begin_src python
print(df.loc[[0]])
print("-" * 30)
print(df.loc[[0, 1]])
#+end_src

#+RESULTS:
:    calories  duration
: 0       420        50
: ------------------------------
:    calories  duration
: 0       420        50
: 1       380        40

**** Pandas DataFrame Name Index
#+begin_src python
df = pd.DataFrame(data, index=["day" + str(x) for x in range(3)])
print(df)
#+end_src

#+RESULTS:
:       calories  duration
: day0       420        50
: day1       380        40
: day2       390        45

**** Pandas Rename Index and Column Name
There are lots of methods to change names. To change the original one,
add argument ~inplace=True~ in function.

#+begin_src python
print(df)
#+end_src

#+RESULTS:
:       calories  duration
: day0       420        50
: day1       380        40
: day2       390        45

***** Change All of the Names
#+begin_src python
print(df.set_axis(["d" + str(x) for x in range(3)], axis=0))
# Or
print("-" * 30)
print(df.set_axis(["d" + str(x) for x in range(3)], axis="index"))
# For columns
print("-" * 30)
print(df.set_axis(["Cal", "Dur"], axis=1))
# Or
print("-" * 30)
print(df.set_axis(["Cal", "Dur"], axis="columns"))
#+end_src

#+RESULTS:
#+begin_example
    calories  duration
d0       420        50
d1       380        40
d2       390        45
------------------------------
    calories  duration
d0       420        50
d1       380        40
d2       390        45
------------------------------
      Cal  Dur
day0  420   50
day1  380   40
day2  390   45
------------------------------
      Cal  Dur
day0  420   50
day1  380   40
day2  390   45
#+end_example

Or simply:

#+begin_src python
df_copy = df.copy()
print(df_copy)
print(df_copy.columns)
print(df_copy.index)
print("-" * 30)
df_copy.columns = ["Cal", "Dur"]
df_copy.index = ["D" + str(x) for x in range(3)]
print(df_copy)
#+end_src

#+RESULTS:
#+begin_example
      calories  duration
day0       420        50
day1       380        40
day2       390        45
Index(['calories', 'duration'], dtype='object')
Index(['day0', 'day1', 'day2'], dtype='object')
------------------------------
    Cal  Dur
D0  420   50
D1  380   40
D2  390   45
#+end_example

***** Change a Part of Names

#+begin_src python
print(df.rename(index={"day1": "Day1"}))
print("-" * 30)
print(df.rename(columns={"calories": "Cal"}))
#+end_src

#+RESULTS:
:       calories  duration
: day0       420        50
: Day1       380        40
: day2       390        45
: ------------------------------
:       Cal  duration
: day0  420        50
: day1  380        40
: day2  390        45

***** Change Names with Functions
#+begin_src python
print(df.rename(index=str.upper, columns=str.title))
#+end_src

#+RESULTS:
:       Calories  Duration
: DAY0       420        50
: DAY1       380        40
: DAY2       390        45

***** Add Prefix/Surfix to Names
#+begin_src python
print(df.add_prefix("num_"))
print("-" * 30)
print(df.add_prefix("data_", axis=0))
#+end_src

#+RESULTS:
:       num_calories  num_duration
: day0           420            50
: day1           380            40
: day2           390            45
: ------------------------------
:            calories  duration
: data_day0       420        50
: data_day1       380        40
: data_day2       390        45

*** Pandas Read Files :TODO:
*** Pandas Write Files :TODO:
*** Pandas Data Analysis :TODO:

* Machine Learning :TODO:
